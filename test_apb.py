import magma as m
from apb import APBMaster, APBSlave


def test_type():
    data_width = 32
    apb_16_32 = APBMaster(16, data_width)()
    assert isinstance(apb_16_32.PCLK, m.Clock)
    assert apb_16_32.PCLK.is_output()
    assert isinstance(apb_16_32.PRESETn, m.Reset)
    assert apb_16_32.PRESETn.is_output()
    assert isinstance(apb_16_32.PADDR, m.Bits)
    assert apb_16_32.PADDR.is_output()
    assert isinstance(apb_16_32.PPROT, m.Bit)
    assert apb_16_32.PPROT.is_output()
    assert isinstance(apb_16_32.PSEL0, m.Bit)
    assert apb_16_32.PSEL0.is_output()
    assert isinstance(apb_16_32.PENABLE, m.Bit)
    assert apb_16_32.PENABLE.is_output()
    assert isinstance(apb_16_32.PWRITE, m.Bit)
    assert apb_16_32.PWRITE.is_output()
    assert isinstance(apb_16_32.PWDATA, m.Bits)
    assert apb_16_32.PWDATA.is_output()
    assert isinstance(apb_16_32.PSTRB, m.Bits)
    assert apb_16_32.PSTRB.is_output()
    assert len(apb_16_32.PSTRB) == data_width / 8
    assert isinstance(apb_16_32.PREADY, m.Bit)
    assert apb_16_32.PREADY.is_input()
    assert isinstance(apb_16_32.PRDATA, m.Bits)
    assert apb_16_32.PRDATA.is_input()
    assert isinstance(apb_16_32.PSLVERR, m.Bit)
    assert apb_16_32.PSLVERR.is_input()

    apb_slave_16_32 = APBSlave(16, data_width, 0)()
    assert isinstance(apb_slave_16_32.PCLK, m.Clock)
    assert apb_slave_16_32.PCLK.is_input()
    assert isinstance(apb_slave_16_32.PRESETn, m.Reset)
    assert apb_slave_16_32.PRESETn.is_input()
    assert isinstance(apb_slave_16_32.PADDR, m.Bits)
    assert apb_slave_16_32.PADDR.is_input()
    assert isinstance(apb_slave_16_32.PPROT, m.Bit)
    assert apb_slave_16_32.PPROT.is_input()
    assert isinstance(apb_slave_16_32.PSEL0, m.Bit)
    assert apb_slave_16_32.PSEL0.is_input()
    assert isinstance(apb_slave_16_32.PENABLE, m.Bit)
    assert apb_slave_16_32.PENABLE.is_input()
    assert isinstance(apb_slave_16_32.PWRITE, m.Bit)
    assert apb_slave_16_32.PWRITE.is_input()
    assert isinstance(apb_slave_16_32.PWDATA, m.Bits)
    assert apb_slave_16_32.PWDATA.is_input()
    assert isinstance(apb_slave_16_32.PSTRB, m.Bits)
    assert apb_slave_16_32.PSTRB.is_input()
    assert len(apb_slave_16_32.PSTRB) == data_width / 8
    assert isinstance(apb_slave_16_32.PREADY, m.Bit)
    assert apb_slave_16_32.PREADY.is_output()
    assert isinstance(apb_slave_16_32.PRDATA, m.Bits)
    assert apb_slave_16_32.PRDATA.is_output()
    assert isinstance(apb_slave_16_32.PSLVERR, m.Bit)
    assert apb_slave_16_32.PSLVERR.is_output()

    assert APBSlave(16, 32, 0).flip() == APBMaster(16, 32)
