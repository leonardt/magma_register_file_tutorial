import magma as m
from apb import APBMaster, APBSlave


def test_type():
    data_width = 32
    apb_16_32 = APBMaster(16, data_width)()
    assert isinstance(apb_16_32.PCLK, m.ClockType)
    assert apb_16_32.PCLK.isoutput()
    assert isinstance(apb_16_32.PRESETn, m.ResetType)
    assert apb_16_32.PRESETn.isoutput()
    assert isinstance(apb_16_32.PADDR, m.BitsType)
    assert apb_16_32.PADDR.isoutput()
    assert isinstance(apb_16_32.PPROT, m.BitType)
    assert apb_16_32.PPROT.isoutput()
    assert isinstance(apb_16_32.PSEL0, m.BitType)
    assert apb_16_32.PSEL0.isoutput()
    assert isinstance(apb_16_32.PENABLE, m.BitType)
    assert apb_16_32.PENABLE.isoutput()
    assert isinstance(apb_16_32.PWRITE, m.BitType)
    assert apb_16_32.PWRITE.isoutput()
    assert isinstance(apb_16_32.PWDATA, m.BitsType)
    assert apb_16_32.PWDATA.isoutput()
    assert isinstance(apb_16_32.PSTRB, m.BitsType)
    assert apb_16_32.PSTRB.isoutput()
    assert len(apb_16_32.PSTRB) == data_width / 8
    assert isinstance(apb_16_32.PREADY, m.BitType)
    assert apb_16_32.PREADY.isinput()
    assert isinstance(apb_16_32.PRDATA, m.BitsType)
    assert apb_16_32.PRDATA.isinput()
    assert isinstance(apb_16_32.PSLVERR, m.BitType)
    assert apb_16_32.PSLVERR.isinput()

    apb_slave_16_32 = APBSlave(16, data_width, 0)()
    assert isinstance(apb_slave_16_32.PCLK, m.ClockType)
    assert apb_slave_16_32.PCLK.isinput()
    assert isinstance(apb_slave_16_32.PRESETn, m.ResetType)
    assert apb_slave_16_32.PRESETn.isinput()
    assert isinstance(apb_slave_16_32.PADDR, m.BitsType)
    assert apb_slave_16_32.PADDR.isinput()
    assert isinstance(apb_slave_16_32.PPROT, m.BitType)
    assert apb_slave_16_32.PPROT.isinput()
    assert isinstance(apb_slave_16_32.PSEL0, m.BitType)
    assert apb_slave_16_32.PSEL0.isinput()
    assert isinstance(apb_slave_16_32.PENABLE, m.BitType)
    assert apb_slave_16_32.PENABLE.isinput()
    assert isinstance(apb_slave_16_32.PWRITE, m.BitType)
    assert apb_slave_16_32.PWRITE.isinput()
    assert isinstance(apb_slave_16_32.PWDATA, m.BitsType)
    assert apb_slave_16_32.PWDATA.isinput()
    assert isinstance(apb_slave_16_32.PSTRB, m.BitsType)
    assert apb_slave_16_32.PSTRB.isinput()
    assert len(apb_slave_16_32.PSTRB) == data_width / 8
    assert isinstance(apb_slave_16_32.PREADY, m.BitType)
    assert apb_slave_16_32.PREADY.isoutput()
    assert isinstance(apb_slave_16_32.PRDATA, m.BitsType)
    assert apb_slave_16_32.PRDATA.isoutput()
    assert isinstance(apb_slave_16_32.PSLVERR, m.BitType)
    assert apb_slave_16_32.PSLVERR.isoutput()

    assert APBSlave(16, 32, 0).flip() == APBMaster(16, 32)
